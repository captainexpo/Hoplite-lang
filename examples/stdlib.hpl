
var PI = 3.14159265358979

mkfunc not(bool){
    if (bool){
        return false
    } else {
        return true
    }
}

mkfunc rad_to_deg(rad){
    var PI = 3.14159265358979
    return rad * 180 / PI
}

mkfunc deg_to_rad(deg){
    
    var PI = 3.14159265358979
    return deg * PI / 180
}
mkfunc abs(x){
    
    if (x < 0){
        return x * (1 - 2)
    } else {
        return x
    }
}

mkfunc factorial(n){
    var result = 1
    while (n > 0){
        result = result * n
        n = n - 1
    }
    return result
}

mkfunc sin(x){
    var tolerance = 0.000001
    var result = 0
    var n = 1
    while (abs(result - sin_taylor(x)) > tolerance){
        result = result + ((1-2)^ (n - 1) * (x) ^ (2 * n - 1)) / factorial(2 * n - 1)
        n = n + 1
    }
    return result
}


mkfunc sqrt(x){
    var tolerance = 0.000001
    var estimate = x / 2
    while (abs(estimate * estimate - x) > tolerance){
        estimate = (estimate + x / estimate) / 2
    }
    return estimate
}
